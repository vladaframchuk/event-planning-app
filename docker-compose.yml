services:
  postgres:
    image: postgres:15
    container_name: event_db
    environment:
      POSTGRES_DB: event_db
      POSTGRES_USER: event_user
      POSTGRES_PASSWORD: event_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U event_user -d event_db"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: event_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: event_backend
    command: /app/scripts/init.sh
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    environment:
      DJANGO_SECRET_KEY: dev-secret
      DEBUG: "1"
      ALLOWED_HOSTS: localhost,127.0.0.1,backend
      DATABASE_URL: postgres://event_user:event_password@postgres:5432/event_db
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CORS_ALLOWED_ORIGINS: http://localhost:3000
      CSRF_TRUSTED_ORIGINS: http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fsS http://localhost:8000/api/health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: event_frontend
    command: npm run dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- http://localhost:3000/health > /dev/null 2>&1 || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
